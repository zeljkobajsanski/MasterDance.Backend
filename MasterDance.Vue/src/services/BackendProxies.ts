/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {DocumentForUpload, MembersProxy} from "@/services/BackendProxies";
import {toFormData} from "@/utils";

export class CompetitionsProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCompetitions(): Promise<CompetitionModel[] | null> {
        let url_ = this.baseUrl + "/api/Competitions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCompetitions(_response);
        });
    }

    protected processGetCompetitions(response: Response): Promise<CompetitionModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompetitionModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetitionModel[] | null>(<any>null);
    }

    saveCompetition(competition: CompetitionModel | null): Promise<number> {
        let url_ = this.baseUrl + "/api/Competitions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(competition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveCompetition(_response);
        });
    }

    protected processSaveCompetition(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    deleteCompetition(id: number): Promise<CompetitionModel[] | null> {
        let url_ = this.baseUrl + "/api/Competitions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCompetition(_response);
        });
    }

    protected processDeleteCompetition(response: Response): Promise<CompetitionModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompetitionModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetitionModel[] | null>(<any>null);
    }
}

export class DocumentsProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getDocument(id: number): Promise<DocumentModel | null> {
        let url_ = this.baseUrl + "/api/Documents?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDocument(_response);
        });
    }

    protected processGetDocument(response: Response): Promise<DocumentModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DocumentModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentModel | null>(<any>null);
    }
}

export class DocumentTypesProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getDocumentTypes(): Promise<DocumentTypeModel[] | null> {
        let url_ = this.baseUrl + "/api/DocumentTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDocumentTypes(_response);
        });
    }

    protected processGetDocumentTypes(response: Response): Promise<DocumentTypeModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DocumentTypeModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentTypeModel[] | null>(<any>null);
    }
}

export class MemberGroupsProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getMemberGroups(): Promise<MemberGroupModel[] | null> {
        let url_ = this.baseUrl + "/api/MemberGroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMemberGroups(_response);
        });
    }

    protected processGetMemberGroups(response: Response): Promise<MemberGroupModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemberGroupModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberGroupModel[] | null>(<any>null);
    }

    saveMemberGroup(model: MemberGroupModel | null): Promise<MemberGroupModel[] | null> {
        let url_ = this.baseUrl + "/api/MemberGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveMemberGroup(_response);
        });
    }

    protected processSaveMemberGroup(response: Response): Promise<MemberGroupModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemberGroupModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberGroupModel[] | null>(<any>null);
    }

    deleteMemberGroupById(id: number): Promise<MemberGroupModel[] | null> {
        let url_ = this.baseUrl + "/api/MemberGroups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteMemberGroupById(_response);
        });
    }

    protected processDeleteMemberGroupById(response: Response): Promise<MemberGroupModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemberGroupModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberGroupModel[] | null>(<any>null);
    }
}

export class MembersProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getMembers(): Promise<MemberModel[] | null> {
        let url_ = this.baseUrl + "/api/Members";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMembers(_response);
        });
    }

    protected processGetMembers(response: Response): Promise<MemberModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemberModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberModel[] | null>(<any>null);
    }

    saveMember(member: MemberDetailsModel | null): Promise<MemberDetailsModel | null> {
        let url_ = this.baseUrl + "/api/Members";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(member);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveMember(_response);
        });
    }

    protected processSaveMember(response: Response): Promise<MemberDetailsModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDetailsModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberDetailsModel | null>(<any>null);
    }

    getMember(id: number): Promise<MemberDetailsModel | null> {
        let url_ = this.baseUrl + "/api/Members/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMember(_response);
        });
    }

    protected processGetMember(response: Response): Promise<MemberDetailsModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDetailsModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberDetailsModel | null>(<any>null);
    }

    getDocuments(memberId: number): Promise<DocumentModel2[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/documents";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDocuments(_response);
        });
    }

    protected processGetDocuments(response: Response): Promise<DocumentModel2[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DocumentModel2.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentModel2[] | null>(<any>null);
    }

    uploadDocument(memberId: number, document: DocumentForUpload | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/documents";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (document !== null && document !== undefined)
            content_.append("document", document.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUploadDocument(_response);
        });
    }

    protected processUploadDocument(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    deleteDocument(memberId: number, documentId: number): Promise<DocumentModel2[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/documents/{documentId}";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteDocument(_response);
        });
    }

    protected processDeleteDocument(response: Response): Promise<DocumentModel2[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DocumentModel2.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentModel2[] | null>(<any>null);
    }

    getMemberships(memberId: number): Promise<MembershipModel[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/memberships";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMemberships(_response);
        });
    }

    protected processGetMemberships(response: Response): Promise<MembershipModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MembershipModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MembershipModel[] | null>(<any>null);
    }

    getPrizes(memberId: number): Promise<PrizeModel[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/prizes";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPrizes(_response);
        });
    }

    protected processGetPrizes(response: Response): Promise<PrizeModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PrizeModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PrizeModel[] | null>(<any>null);
    }

    savePrize(memberId: number, prize: PrizeModel | null): Promise<PrizeModel[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/prizes";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(prize);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSavePrize(_response);
        });
    }

    protected processSavePrize(response: Response): Promise<PrizeModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PrizeModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PrizeModel[] | null>(<any>null);
    }

    deletePrize(memberId: number, id: number): Promise<PrizeModel[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/prizes/{id}";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePrize(_response);
        });
    }

    protected processDeletePrize(response: Response): Promise<PrizeModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PrizeModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PrizeModel[] | null>(<any>null);
    }
}

export class MembershipsProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    calculateMemberships(year: number, month: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Memberships/CalculateMemberships?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&"; 
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined and cannot be null.");
        else
            url_ += "month=" + encodeURIComponent("" + month) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCalculateMemberships(_response);
        });
    }

    protected processCalculateMemberships(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class CompetitionModel implements ICompetitionModel {
    id!: number;
    date?: string | undefined;
    name?: string | undefined;
    city?: string | undefined;

    constructor(data?: ICompetitionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.date = data["date"];
            this.name = data["name"];
            this.city = data["city"];
        }
    }

    static fromJS(data: any): CompetitionModel {
        data = typeof data === 'object' ? data : {};
        let result = new CompetitionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date;
        data["name"] = this.name;
        data["city"] = this.city;
        return data; 
    }

    clone(): CompetitionModel {
        const json = this.toJSON();
        let result = new CompetitionModel();
        result.init(json);
        return result;
    }
}

export interface ICompetitionModel {
    id: number;
    date?: string | undefined;
    name?: string | undefined;
    city?: string | undefined;
}

export class DocumentModel implements IDocumentModel {
    fileName?: string | undefined;
    contentType?: string | undefined;
    content?: string | undefined;

    constructor(data?: IDocumentModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.contentType = data["contentType"];
            this.content = data["content"];
        }
    }

    static fromJS(data: any): DocumentModel {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["contentType"] = this.contentType;
        data["content"] = this.content;
        return data; 
    }

    clone(): DocumentModel {
        const json = this.toJSON();
        let result = new DocumentModel();
        result.init(json);
        return result;
    }
}

export interface IDocumentModel {
    fileName?: string | undefined;
    contentType?: string | undefined;
    content?: string | undefined;
}

export class DocumentTypeModel implements IDocumentTypeModel {
    id!: number;
    name?: string | undefined;

    constructor(data?: IDocumentTypeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): DocumentTypeModel {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentTypeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }

    clone(): DocumentTypeModel {
        const json = this.toJSON();
        let result = new DocumentTypeModel();
        result.init(json);
        return result;
    }
}

export interface IDocumentTypeModel {
    id: number;
    name?: string | undefined;
}

export class MemberGroupModel implements IMemberGroupModel {
    id!: number;
    name?: string | undefined;

    constructor(data?: IMemberGroupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): MemberGroupModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberGroupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }

    clone(): MemberGroupModel {
        const json = this.toJSON();
        let result = new MemberGroupModel();
        result.init(json);
        return result;
    }
}

export interface IMemberGroupModel {
    id: number;
    name?: string | undefined;
}

export class MemberModel implements IMemberModel {
    id!: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    image?: string | undefined;
    memberGroupId?: number | undefined;

    constructor(data?: IMemberModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.image = data["image"];
            this.memberGroupId = data["memberGroupId"];
        }
    }

    static fromJS(data: any): MemberModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["image"] = this.image;
        data["memberGroupId"] = this.memberGroupId;
        return data; 
    }

    clone(): MemberModel {
        const json = this.toJSON();
        let result = new MemberModel();
        result.init(json);
        return result;
    }
}

export interface IMemberModel {
    id: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    image?: string | undefined;
    memberGroupId?: number | undefined;
}

export class MemberDetailsModel implements IMemberDetailsModel {
    id!: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender!: number;
    dateOfBirth!: string;
    joinedDate?: string | undefined;
    image?: string | undefined;
    contactAddress?: string | undefined;
    contactPhone?: string | undefined;
    fatherId?: number | undefined;
    motherId?: number | undefined;
    fatherFirstName?: string | undefined;
    fatherContactPhone?: string | undefined;
    motherFirstName?: string | undefined;
    motherContactPhone?: string | undefined;
    isActive!: boolean;
    memberGroupId?: number | undefined;
    attendGymnastics!: boolean;

    constructor(data?: IMemberDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.gender = data["gender"];
            this.dateOfBirth = data["dateOfBirth"];
            this.joinedDate = data["joinedDate"];
            this.image = data["image"];
            this.contactAddress = data["contactAddress"];
            this.contactPhone = data["contactPhone"];
            this.fatherId = data["fatherId"];
            this.motherId = data["motherId"];
            this.fatherFirstName = data["fatherFirstName"];
            this.fatherContactPhone = data["fatherContactPhone"];
            this.motherFirstName = data["motherFirstName"];
            this.motherContactPhone = data["motherContactPhone"];
            this.isActive = data["isActive"];
            this.memberGroupId = data["memberGroupId"];
            this.attendGymnastics = data["attendGymnastics"];
        }
    }

    static fromJS(data: any): MemberDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["dateOfBirth"] = this.dateOfBirth;
        data["joinedDate"] = this.joinedDate;
        data["image"] = this.image;
        data["contactAddress"] = this.contactAddress;
        data["contactPhone"] = this.contactPhone;
        data["fatherId"] = this.fatherId;
        data["motherId"] = this.motherId;
        data["fatherFirstName"] = this.fatherFirstName;
        data["fatherContactPhone"] = this.fatherContactPhone;
        data["motherFirstName"] = this.motherFirstName;
        data["motherContactPhone"] = this.motherContactPhone;
        data["isActive"] = this.isActive;
        data["memberGroupId"] = this.memberGroupId;
        data["attendGymnastics"] = this.attendGymnastics;
        return data; 
    }

    clone(): MemberDetailsModel {
        const json = this.toJSON();
        let result = new MemberDetailsModel();
        result.init(json);
        return result;
    }
}

export interface IMemberDetailsModel {
    id: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender: number;
    dateOfBirth: string;
    joinedDate?: string | undefined;
    image?: string | undefined;
    contactAddress?: string | undefined;
    contactPhone?: string | undefined;
    fatherId?: number | undefined;
    motherId?: number | undefined;
    fatherFirstName?: string | undefined;
    fatherContactPhone?: string | undefined;
    motherFirstName?: string | undefined;
    motherContactPhone?: string | undefined;
    isActive: boolean;
    memberGroupId?: number | undefined;
    attendGymnastics: boolean;
}

export class DocumentModel2 implements IDocumentModel2 {
    fileName?: string | undefined;
    contentType?: string | undefined;
    memberId!: number;
    documentType!: number;
    id!: number;
    typeName?: string | undefined;
    content?: string | undefined;
    expirationDate?: string | undefined;

    constructor(data?: IDocumentModel2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.contentType = data["contentType"];
            this.memberId = data["memberId"];
            this.documentType = data["documentType"];
            this.id = data["id"];
            this.typeName = data["typeName"];
            this.content = data["content"];
            this.expirationDate = data["expirationDate"];
        }
    }

    static fromJS(data: any): DocumentModel2 {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentModel2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["contentType"] = this.contentType;
        data["memberId"] = this.memberId;
        data["documentType"] = this.documentType;
        data["id"] = this.id;
        data["typeName"] = this.typeName;
        data["content"] = this.content;
        data["expirationDate"] = this.expirationDate;
        return data; 
    }

    clone(): DocumentModel2 {
        const json = this.toJSON();
        let result = new DocumentModel2();
        result.init(json);
        return result;
    }
}

export interface IDocumentModel2 {
    fileName?: string | undefined;
    contentType?: string | undefined;
    memberId: number;
    documentType: number;
    id: number;
    typeName?: string | undefined;
    content?: string | undefined;
    expirationDate?: string | undefined;
}

export class DocumentForUpload implements IDocumentForUpload {
    memberId!: number;
    documentTypeId!: number;
    date?: string | undefined;
    file?: any | undefined;

    constructor(data?: IDocumentForUpload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.memberId = data["memberId"];
            this.documentTypeId = data["documentTypeId"];
            this.date = data["date"];
            this.file = data["file"];
        }
    }

    static fromJS(data: any): DocumentForUpload {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentForUpload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberId"] = this.memberId;
        data["documentTypeId"] = this.documentTypeId;
        data["date"] = this.date;
        data["file"] = this.file;
        return data; 
    }

    clone(): DocumentForUpload {
        const json = this.toJSON();
        let result = new DocumentForUpload();
        result.init(json);
        return result;
    }
}

export interface IDocumentForUpload {
    memberId: number;
    documentTypeId: number;
    date?: string | undefined;
    file?: any | undefined;
}

export class MembershipModel implements IMembershipModel {
    id!: number;
    date!: string;
    memberId!: number;
    amount!: number;
    paidAmount!: number;

    constructor(data?: IMembershipModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.date = data["date"];
            this.memberId = data["memberId"];
            this.amount = data["amount"];
            this.paidAmount = data["paidAmount"];
        }
    }

    static fromJS(data: any): MembershipModel {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date;
        data["memberId"] = this.memberId;
        data["amount"] = this.amount;
        data["paidAmount"] = this.paidAmount;
        return data; 
    }

    clone(): MembershipModel {
        const json = this.toJSON();
        let result = new MembershipModel();
        result.init(json);
        return result;
    }
}

export interface IMembershipModel {
    id: number;
    date: string;
    memberId: number;
    amount: number;
    paidAmount: number;
}

export class PrizeModel implements IPrizeModel {
    id!: number;
    competitionId!: number;
    competitionName?: string | undefined;
    competitionDate?: string | undefined;
    memberId!: number;
    title?: string | undefined;

    constructor(data?: IPrizeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.competitionId = data["competitionId"];
            this.competitionName = data["competitionName"];
            this.competitionDate = data["competitionDate"];
            this.memberId = data["memberId"];
            this.title = data["title"];
        }
    }

    static fromJS(data: any): PrizeModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrizeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["competitionId"] = this.competitionId;
        data["competitionName"] = this.competitionName;
        data["competitionDate"] = this.competitionDate;
        data["memberId"] = this.memberId;
        data["title"] = this.title;
        return data; 
    }

    clone(): PrizeModel {
        const json = this.toJSON();
        let result = new PrizeModel();
        result.init(json);
        return result;
    }
}

export interface IPrizeModel {
    id: number;
    competitionId: number;
    competitionName?: string | undefined;
    competitionDate?: string | undefined;
    memberId: number;
    title?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}