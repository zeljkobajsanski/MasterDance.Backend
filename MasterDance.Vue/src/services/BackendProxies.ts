/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import authClient from './AuthenticationProxy'
export class BaseProxy {
    protected transformOptions(options) {
        options.headers['Authorization'] = `Bearer ${authClient.accessToken}`;
        return Promise.resolve(options);
    }
}

export class CompetitionsProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCompetitions(): Promise<CompetitionModel[] | null> {
        let url_ = this.baseUrl + "/api/Competitions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetCompetitions(_response);
        });
    }

    protected processGetCompetitions(response: Response): Promise<CompetitionModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompetitionModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetitionModel[] | null>(<any>null);
    }

    saveCompetition(competition: CompetitionModel): Promise<number> {
        let url_ = this.baseUrl + "/api/Competitions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(competition);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processSaveCompetition(_response);
        });
    }

    protected processSaveCompetition(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    deleteCompetition(id: number): Promise<CompetitionModel[] | null> {
        let url_ = this.baseUrl + "/api/Competitions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDeleteCompetition(_response);
        });
    }

    protected processDeleteCompetition(response: Response): Promise<CompetitionModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompetitionModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetitionModel[] | null>(<any>null);
    }
}

export class DashboardProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getDashboard(): Promise<DashboardViewModel | null> {
        let url_ = this.baseUrl + "/api/Dashboard";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetDashboard(_response);
        });
    }

    protected processGetDashboard(response: Response): Promise<DashboardViewModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DashboardViewModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DashboardViewModel | null>(<any>null);
    }

    getNotifications(): Promise<NotificationModel[] | null> {
        let url_ = this.baseUrl + "/api/Dashboard/GetNotifications";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetNotifications(_response);
        });
    }

    protected processGetNotifications(response: Response): Promise<NotificationModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NotificationModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NotificationModel[] | null>(<any>null);
    }
}

export class DocumentsProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getDocument(id: number | undefined): Promise<DocumentModel | null> {
        let url_ = this.baseUrl + "/api/Documents?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetDocument(_response);
        });
    }

    protected processGetDocument(response: Response): Promise<DocumentModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DocumentModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentModel | null>(<any>null);
    }
}

export class DocumentTypesProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getDocumentTypes(): Promise<DocumentTypeModel[] | null> {
        let url_ = this.baseUrl + "/api/DocumentTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetDocumentTypes(_response);
        });
    }

    protected processGetDocumentTypes(response: Response): Promise<DocumentTypeModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DocumentTypeModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentTypeModel[] | null>(<any>null);
    }
}

export class MemberGroupsProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getMemberGroups(): Promise<MemberGroupModel[] | null> {
        let url_ = this.baseUrl + "/api/MemberGroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMemberGroups(_response);
        });
    }

    protected processGetMemberGroups(response: Response): Promise<MemberGroupModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemberGroupModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberGroupModel[] | null>(<any>null);
    }

    saveMemberGroup(model: MemberGroupModel): Promise<MemberGroupModel[] | null> {
        let url_ = this.baseUrl + "/api/MemberGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processSaveMemberGroup(_response);
        });
    }

    protected processSaveMemberGroup(response: Response): Promise<MemberGroupModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemberGroupModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberGroupModel[] | null>(<any>null);
    }

    deleteMemberGroupById(id: number): Promise<MemberGroupModel[] | null> {
        let url_ = this.baseUrl + "/api/MemberGroups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDeleteMemberGroupById(_response);
        });
    }

    protected processDeleteMemberGroupById(response: Response): Promise<MemberGroupModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemberGroupModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberGroupModel[] | null>(<any>null);
    }
}

export class MembersProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getMembers(): Promise<MemberModel[] | null> {
        let url_ = this.baseUrl + "/api/Members";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMembers(_response);
        });
    }

    protected processGetMembers(response: Response): Promise<MemberModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemberModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberModel[] | null>(<any>null);
    }

    saveMember(member: MemberDetailsModel): Promise<MemberDetailsModel | null> {
        let url_ = this.baseUrl + "/api/Members";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(member);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processSaveMember(_response);
        });
    }

    protected processSaveMember(response: Response): Promise<MemberDetailsModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDetailsModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberDetailsModel | null>(<any>null);
    }

    getMember(id: number): Promise<MemberDetailsModel | null> {
        let url_ = this.baseUrl + "/api/Members/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMember(_response);
        });
    }

    protected processGetMember(response: Response): Promise<MemberDetailsModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDetailsModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberDetailsModel | null>(<any>null);
    }

    getDocuments(memberId: number): Promise<DocumentModel2[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/documents";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetDocuments(_response);
        });
    }

    protected processGetDocuments(response: Response): Promise<DocumentModel2[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DocumentModel2.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentModel2[] | null>(<any>null);
    }

    uploadDocument(memberId: number | undefined, documentTypeId: number | undefined, date: string | null | undefined, file: FileParameter | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/Members/UploadDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (memberId === null || memberId === undefined)
            throw new Error("The parameter 'memberId' cannot be null.");
        else
            content_.append("MemberId", memberId.toString());
        if (documentTypeId === null || documentTypeId === undefined)
            throw new Error("The parameter 'documentTypeId' cannot be null.");
        else
            content_.append("DocumentTypeId", documentTypeId.toString());
        if (date !== null && date !== undefined)
            content_.append("Date", date.toString());
        if (file !== null && file !== undefined)
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUploadDocument(_response);
        });
    }

    protected processUploadDocument(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    deleteDocument(memberId: number, documentId: number): Promise<DocumentModel2[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/documents/{documentId}";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDeleteDocument(_response);
        });
    }

    protected processDeleteDocument(response: Response): Promise<DocumentModel2[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DocumentModel2.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DocumentModel2[] | null>(<any>null);
    }

    getMemberships(memberId: number): Promise<MembershipModel[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/memberships";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMemberships(_response);
        });
    }

    protected processGetMemberships(response: Response): Promise<MembershipModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MembershipModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MembershipModel[] | null>(<any>null);
    }

    getPrizes(memberId: number): Promise<PrizeModel[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/prizes";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPrizes(_response);
        });
    }

    protected processGetPrizes(response: Response): Promise<PrizeModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PrizeModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PrizeModel[] | null>(<any>null);
    }

    savePrize(memberId: number, prize: PrizeModel): Promise<PrizeModel[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/prizes";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(prize);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processSavePrize(_response);
        });
    }

    protected processSavePrize(response: Response): Promise<PrizeModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PrizeModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PrizeModel[] | null>(<any>null);
    }

    deletePrize(memberId: number, id: number): Promise<PrizeModel[] | null> {
        let url_ = this.baseUrl + "/api/Members/{memberId}/prizes/{id}";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined.");
        url_ = url_.replace("{memberId}", encodeURIComponent("" + memberId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDeletePrize(_response);
        });
    }

    protected processDeletePrize(response: Response): Promise<PrizeModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PrizeModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PrizeModel[] | null>(<any>null);
    }
}

export class MembershipsProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    calculateMemberships(request: Request): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Memberships/CalculateMemberships";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCalculateMemberships(_response);
        });
    }

    protected processCalculateMemberships(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    getDebtList(): Promise<DebtModel[] | null> {
        let url_ = this.baseUrl + "/api/Memberships/GetDebtList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetDebtList(_response);
        });
    }

    protected processGetDebtList(response: Response): Promise<DebtModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DebtModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DebtModel[] | null>(<any>null);
    }

    getMembershipsAndPayments(): Promise<MembershipsAndPayments[] | null> {
        let url_ = this.baseUrl + "/api/Memberships";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMembershipsAndPayments(_response);
        });
    }

    protected processGetMembershipsAndPayments(response: Response): Promise<MembershipsAndPayments[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MembershipsAndPayments.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MembershipsAndPayments[] | null>(<any>null);
    }
}

export class MobileProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getMemberGroups(): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Mobile/GetMemberGroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMemberGroups(_response);
        });
    }

    protected processGetMemberGroups(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    getEvidence(groupId: number | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Mobile/GetEvidence?";
        if (groupId === null)
            throw new Error("The parameter 'groupId' cannot be null.");
        else if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetEvidence(_response);
        });
    }

    protected processGetEvidence(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    saveEvidence(model: SaveEvidenceModel): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Mobile/SaveEvidence";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processSaveEvidence(_response);
        });
    }

    protected processSaveEvidence(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    getMembers(): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Mobile/GetMembers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMembers(_response);
        });
    }

    protected processGetMembers(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    makePayment(payment: PaymentModel): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Mobile/MakePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payment);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processMakePayment(_response);
        });
    }

    protected processMakePayment(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    registerDevice(request: Request2): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Mobile/RegisterDevice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRegisterDevice(_response);
        });
    }

    protected processRegisterDevice(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export class PaymentCategoriesProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getPaymentCategories(): Promise<PaymentCategoryModel[] | null> {
        let url_ = this.baseUrl + "/api/PaymentCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPaymentCategories(_response);
        });
    }

    protected processGetPaymentCategories(response: Response): Promise<PaymentCategoryModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PaymentCategoryModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaymentCategoryModel[] | null>(<any>null);
    }
}

export class PaymentsProxy extends BaseProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    makePayment(payment: PaymentModel): Promise<MembershipModel[] | null> {
        let url_ = this.baseUrl + "/api/Payments/MakePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payment);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processMakePayment(_response);
        });
    }

    protected processMakePayment(response: Response): Promise<MembershipModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MembershipModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MembershipModel[] | null>(<any>null);
    }
}

export class CompetitionModel implements ICompetitionModel {
    id!: number;
    date?: string | undefined;
    name?: string | undefined;
    city?: string | undefined;

    constructor(data?: ICompetitionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.date = data["date"];
            this.name = data["name"];
            this.city = data["city"];
        }
    }

    static fromJS(data: any): CompetitionModel {
        data = typeof data === 'object' ? data : {};
        let result = new CompetitionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date;
        data["name"] = this.name;
        data["city"] = this.city;
        return data; 
    }

    clone(): CompetitionModel {
        const json = this.toJSON();
        let result = new CompetitionModel();
        result.init(json);
        return result;
    }
}

export interface ICompetitionModel {
    id: number;
    date?: string | undefined;
    name?: string | undefined;
    city?: string | undefined;
}

export class DashboardViewModel implements IDashboardViewModel {
    totalMembers!: number;
    debit!: number;
    profit!: number;

    constructor(data?: IDashboardViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalMembers = data["totalMembers"];
            this.debit = data["debit"];
            this.profit = data["profit"];
        }
    }

    static fromJS(data: any): DashboardViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalMembers"] = this.totalMembers;
        data["debit"] = this.debit;
        data["profit"] = this.profit;
        return data; 
    }

    clone(): DashboardViewModel {
        const json = this.toJSON();
        let result = new DashboardViewModel();
        result.init(json);
        return result;
    }
}

export interface IDashboardViewModel {
    totalMembers: number;
    debit: number;
    profit: number;
}

export class NotificationModel implements INotificationModel {
    memberId!: number;
    member?: string | undefined;
    notificationType?: string | undefined;
    date!: string;
    daysDiff!: number;

    constructor(data?: INotificationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.memberId = data["memberId"];
            this.member = data["member"];
            this.notificationType = data["notificationType"];
            this.date = data["date"];
            this.daysDiff = data["daysDiff"];
        }
    }

    static fromJS(data: any): NotificationModel {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberId"] = this.memberId;
        data["member"] = this.member;
        data["notificationType"] = this.notificationType;
        data["date"] = this.date;
        data["daysDiff"] = this.daysDiff;
        return data; 
    }

    clone(): NotificationModel {
        const json = this.toJSON();
        let result = new NotificationModel();
        result.init(json);
        return result;
    }
}

export interface INotificationModel {
    memberId: number;
    member?: string | undefined;
    notificationType?: string | undefined;
    date: string;
    daysDiff: number;
}

export class DocumentModel implements IDocumentModel {
    fileName?: string | undefined;
    contentType?: string | undefined;
    content?: string | undefined;

    constructor(data?: IDocumentModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.contentType = data["contentType"];
            this.content = data["content"];
        }
    }

    static fromJS(data: any): DocumentModel {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["contentType"] = this.contentType;
        data["content"] = this.content;
        return data; 
    }

    clone(): DocumentModel {
        const json = this.toJSON();
        let result = new DocumentModel();
        result.init(json);
        return result;
    }
}

export interface IDocumentModel {
    fileName?: string | undefined;
    contentType?: string | undefined;
    content?: string | undefined;
}

export class DocumentTypeModel implements IDocumentTypeModel {
    id!: number;
    name?: string | undefined;

    constructor(data?: IDocumentTypeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): DocumentTypeModel {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentTypeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }

    clone(): DocumentTypeModel {
        const json = this.toJSON();
        let result = new DocumentTypeModel();
        result.init(json);
        return result;
    }
}

export interface IDocumentTypeModel {
    id: number;
    name?: string | undefined;
}

export class MemberGroupModel implements IMemberGroupModel {
    id!: number;
    name?: string | undefined;

    constructor(data?: IMemberGroupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): MemberGroupModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberGroupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }

    clone(): MemberGroupModel {
        const json = this.toJSON();
        let result = new MemberGroupModel();
        result.init(json);
        return result;
    }
}

export interface IMemberGroupModel {
    id: number;
    name?: string | undefined;
}

export class MemberModel implements IMemberModel {
    id!: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    image?: string | undefined;
    memberGroupId?: number | undefined;

    constructor(data?: IMemberModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.image = data["image"];
            this.memberGroupId = data["memberGroupId"];
        }
    }

    static fromJS(data: any): MemberModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["image"] = this.image;
        data["memberGroupId"] = this.memberGroupId;
        return data; 
    }

    clone(): MemberModel {
        const json = this.toJSON();
        let result = new MemberModel();
        result.init(json);
        return result;
    }
}

export interface IMemberModel {
    id: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    image?: string | undefined;
    memberGroupId?: number | undefined;
}

export class MemberDetailsModel implements IMemberDetailsModel {
    id!: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender!: number;
    dateOfBirth!: string;
    joinedDate?: string | undefined;
    image?: string | undefined;
    contactAddress?: string | undefined;
    contactPhone?: string | undefined;
    fatherId?: number | undefined;
    motherId?: number | undefined;
    fatherFirstName?: string | undefined;
    fatherContactPhone?: string | undefined;
    motherFirstName?: string | undefined;
    motherContactPhone?: string | undefined;
    isActive!: boolean;
    memberGroupId?: number | undefined;
    attendGymnastics!: boolean;
    jmbg?: string | undefined;
    paymentCategoryId?: number | undefined;

    constructor(data?: IMemberDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.gender = data["gender"];
            this.dateOfBirth = data["dateOfBirth"];
            this.joinedDate = data["joinedDate"];
            this.image = data["image"];
            this.contactAddress = data["contactAddress"];
            this.contactPhone = data["contactPhone"];
            this.fatherId = data["fatherId"];
            this.motherId = data["motherId"];
            this.fatherFirstName = data["fatherFirstName"];
            this.fatherContactPhone = data["fatherContactPhone"];
            this.motherFirstName = data["motherFirstName"];
            this.motherContactPhone = data["motherContactPhone"];
            this.isActive = data["isActive"];
            this.memberGroupId = data["memberGroupId"];
            this.attendGymnastics = data["attendGymnastics"];
            this.jmbg = data["jmbg"];
            this.paymentCategoryId = data["paymentCategoryId"];
        }
    }

    static fromJS(data: any): MemberDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["dateOfBirth"] = this.dateOfBirth;
        data["joinedDate"] = this.joinedDate;
        data["image"] = this.image;
        data["contactAddress"] = this.contactAddress;
        data["contactPhone"] = this.contactPhone;
        data["fatherId"] = this.fatherId;
        data["motherId"] = this.motherId;
        data["fatherFirstName"] = this.fatherFirstName;
        data["fatherContactPhone"] = this.fatherContactPhone;
        data["motherFirstName"] = this.motherFirstName;
        data["motherContactPhone"] = this.motherContactPhone;
        data["isActive"] = this.isActive;
        data["memberGroupId"] = this.memberGroupId;
        data["attendGymnastics"] = this.attendGymnastics;
        data["jmbg"] = this.jmbg;
        data["paymentCategoryId"] = this.paymentCategoryId;
        return data; 
    }

    clone(): MemberDetailsModel {
        const json = this.toJSON();
        let result = new MemberDetailsModel();
        result.init(json);
        return result;
    }
}

export interface IMemberDetailsModel {
    id: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender: number;
    dateOfBirth: string;
    joinedDate?: string | undefined;
    image?: string | undefined;
    contactAddress?: string | undefined;
    contactPhone?: string | undefined;
    fatherId?: number | undefined;
    motherId?: number | undefined;
    fatherFirstName?: string | undefined;
    fatherContactPhone?: string | undefined;
    motherFirstName?: string | undefined;
    motherContactPhone?: string | undefined;
    isActive: boolean;
    memberGroupId?: number | undefined;
    attendGymnastics: boolean;
    jmbg?: string | undefined;
    paymentCategoryId?: number | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }

    clone(): ProblemDetails {
        const json = this.toJSON();
        let result = new ProblemDetails();
        result.init(json);
        return result;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class DocumentModel2 implements IDocumentModel2 {
    fileName?: string | undefined;
    contentType?: string | undefined;
    memberId!: number;
    documentType!: number;
    id!: number;
    typeName?: string | undefined;
    content?: string | undefined;
    expirationDate?: string | undefined;

    constructor(data?: IDocumentModel2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.contentType = data["contentType"];
            this.memberId = data["memberId"];
            this.documentType = data["documentType"];
            this.id = data["id"];
            this.typeName = data["typeName"];
            this.content = data["content"];
            this.expirationDate = data["expirationDate"];
        }
    }

    static fromJS(data: any): DocumentModel2 {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentModel2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["contentType"] = this.contentType;
        data["memberId"] = this.memberId;
        data["documentType"] = this.documentType;
        data["id"] = this.id;
        data["typeName"] = this.typeName;
        data["content"] = this.content;
        data["expirationDate"] = this.expirationDate;
        return data; 
    }

    clone(): DocumentModel2 {
        const json = this.toJSON();
        let result = new DocumentModel2();
        result.init(json);
        return result;
    }
}

export interface IDocumentModel2 {
    fileName?: string | undefined;
    contentType?: string | undefined;
    memberId: number;
    documentType: number;
    id: number;
    typeName?: string | undefined;
    content?: string | undefined;
    expirationDate?: string | undefined;
}

export class MembershipModel implements IMembershipModel {
    id!: number;
    date!: string;
    memberId!: number;
    amount!: number;
    paidAmount!: number;

    constructor(data?: IMembershipModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.date = data["date"];
            this.memberId = data["memberId"];
            this.amount = data["amount"];
            this.paidAmount = data["paidAmount"];
        }
    }

    static fromJS(data: any): MembershipModel {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date;
        data["memberId"] = this.memberId;
        data["amount"] = this.amount;
        data["paidAmount"] = this.paidAmount;
        return data; 
    }

    clone(): MembershipModel {
        const json = this.toJSON();
        let result = new MembershipModel();
        result.init(json);
        return result;
    }
}

export interface IMembershipModel {
    id: number;
    date: string;
    memberId: number;
    amount: number;
    paidAmount: number;
}

export class PrizeModel implements IPrizeModel {
    id!: number;
    competitionId!: number;
    competitionName?: string | undefined;
    competitionDate?: string | undefined;
    memberId!: number;
    title?: string | undefined;
    category?: string | undefined;
    choreography?: string | undefined;

    constructor(data?: IPrizeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.competitionId = data["competitionId"];
            this.competitionName = data["competitionName"];
            this.competitionDate = data["competitionDate"];
            this.memberId = data["memberId"];
            this.title = data["title"];
            this.category = data["category"];
            this.choreography = data["choreography"];
        }
    }

    static fromJS(data: any): PrizeModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrizeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["competitionId"] = this.competitionId;
        data["competitionName"] = this.competitionName;
        data["competitionDate"] = this.competitionDate;
        data["memberId"] = this.memberId;
        data["title"] = this.title;
        data["category"] = this.category;
        data["choreography"] = this.choreography;
        return data; 
    }

    clone(): PrizeModel {
        const json = this.toJSON();
        let result = new PrizeModel();
        result.init(json);
        return result;
    }
}

export interface IPrizeModel {
    id: number;
    competitionId: number;
    competitionName?: string | undefined;
    competitionDate?: string | undefined;
    memberId: number;
    title?: string | undefined;
    category?: string | undefined;
    choreography?: string | undefined;
}

export class Request implements IRequest {
    year!: number;
    month!: number;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.year = data["year"];
            this.month = data["month"];
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        return data; 
    }

    clone(): Request {
        const json = this.toJSON();
        let result = new Request();
        result.init(json);
        return result;
    }
}

export interface IRequest {
    year: number;
    month: number;
}

export class DebtModel implements IDebtModel {
    memberId!: number;
    member?: string | undefined;
    balance!: number;

    constructor(data?: IDebtModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.memberId = data["memberId"];
            this.member = data["member"];
            this.balance = data["balance"];
        }
    }

    static fromJS(data: any): DebtModel {
        data = typeof data === 'object' ? data : {};
        let result = new DebtModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberId"] = this.memberId;
        data["member"] = this.member;
        data["balance"] = this.balance;
        return data; 
    }

    clone(): DebtModel {
        const json = this.toJSON();
        let result = new DebtModel();
        result.init(json);
        return result;
    }
}

export interface IDebtModel {
    memberId: number;
    member?: string | undefined;
    balance: number;
}

export class MembershipsAndPayments implements IMembershipsAndPayments {
    id!: number;
    member?: string | undefined;
    description?: string | undefined;
    memberId!: number;
    year!: number;
    month!: number;
    amount!: number;
    paidAmount!: number;
    difference!: number;

    constructor(data?: IMembershipsAndPayments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.member = data["member"];
            this.description = data["description"];
            this.memberId = data["memberId"];
            this.year = data["year"];
            this.month = data["month"];
            this.amount = data["amount"];
            this.paidAmount = data["paidAmount"];
            this.difference = data["difference"];
        }
    }

    static fromJS(data: any): MembershipsAndPayments {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipsAndPayments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["member"] = this.member;
        data["description"] = this.description;
        data["memberId"] = this.memberId;
        data["year"] = this.year;
        data["month"] = this.month;
        data["amount"] = this.amount;
        data["paidAmount"] = this.paidAmount;
        data["difference"] = this.difference;
        return data; 
    }

    clone(): MembershipsAndPayments {
        const json = this.toJSON();
        let result = new MembershipsAndPayments();
        result.init(json);
        return result;
    }
}

export interface IMembershipsAndPayments {
    id: number;
    member?: string | undefined;
    description?: string | undefined;
    memberId: number;
    year: number;
    month: number;
    amount: number;
    paidAmount: number;
    difference: number;
}

export class SaveEvidenceModel implements ISaveEvidenceModel {
    coachId!: number;
    date!: string;
    members?: EvidenceModel[] | undefined;

    constructor(data?: ISaveEvidenceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.coachId = data["coachId"];
            this.date = data["date"];
            if (data["members"] && data["members"].constructor === Array) {
                this.members = [] as any;
                for (let item of data["members"])
                    this.members!.push(EvidenceModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SaveEvidenceModel {
        data = typeof data === 'object' ? data : {};
        let result = new SaveEvidenceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coachId"] = this.coachId;
        data["date"] = this.date;
        if (this.members && this.members.constructor === Array) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        return data; 
    }

    clone(): SaveEvidenceModel {
        const json = this.toJSON();
        let result = new SaveEvidenceModel();
        result.init(json);
        return result;
    }
}

export interface ISaveEvidenceModel {
    coachId: number;
    date: string;
    members?: EvidenceModel[] | undefined;
}

export class EvidenceModel implements IEvidenceModel {
    id!: number;
    image?: string | undefined;
    name?: string | undefined;
    isSelected!: boolean;
    evidenceId?: number | undefined;

    constructor(data?: IEvidenceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.image = data["image"];
            this.name = data["name"];
            this.isSelected = data["isSelected"];
            this.evidenceId = data["evidenceId"];
        }
    }

    static fromJS(data: any): EvidenceModel {
        data = typeof data === 'object' ? data : {};
        let result = new EvidenceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["image"] = this.image;
        data["name"] = this.name;
        data["isSelected"] = this.isSelected;
        data["evidenceId"] = this.evidenceId;
        return data; 
    }

    clone(): EvidenceModel {
        const json = this.toJSON();
        let result = new EvidenceModel();
        result.init(json);
        return result;
    }
}

export interface IEvidenceModel {
    id: number;
    image?: string | undefined;
    name?: string | undefined;
    isSelected: boolean;
    evidenceId?: number | undefined;
}

export class PaymentModel implements IPaymentModel {
    dateTime!: string;
    amount!: number;
    memberId!: number;

    constructor(data?: IPaymentModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateTime = data["dateTime"];
            this.amount = data["amount"];
            this.memberId = data["memberId"];
        }
    }

    static fromJS(data: any): PaymentModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateTime"] = this.dateTime;
        data["amount"] = this.amount;
        data["memberId"] = this.memberId;
        return data; 
    }

    clone(): PaymentModel {
        const json = this.toJSON();
        let result = new PaymentModel();
        result.init(json);
        return result;
    }
}

export interface IPaymentModel {
    dateTime: string;
    amount: number;
    memberId: number;
}

export class Request2 implements IRequest2 {
    deviceId?: string | undefined;

    constructor(data?: IRequest2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.deviceId = data["deviceId"];
        }
    }

    static fromJS(data: any): Request2 {
        data = typeof data === 'object' ? data : {};
        let result = new Request2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        return data; 
    }

    clone(): Request2 {
        const json = this.toJSON();
        let result = new Request2();
        result.init(json);
        return result;
    }
}

export interface IRequest2 {
    deviceId?: string | undefined;
}

export class PaymentCategoryModel implements IPaymentCategoryModel {
    id!: number;
    name?: string | undefined;

    constructor(data?: IPaymentCategoryModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): PaymentCategoryModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentCategoryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }

    clone(): PaymentCategoryModel {
        const json = this.toJSON();
        let result = new PaymentCategoryModel();
        result.init(json);
        return result;
    }
}

export interface IPaymentCategoryModel {
    id: number;
    name?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}