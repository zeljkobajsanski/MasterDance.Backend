/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class MembersProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getMembers(): Promise<MemberModel | null> {
        let url_ = this.baseUrl + "/api/Members";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMembers(_response);
        });
    }

    protected processGetMembers(response: Response): Promise<MemberModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberModel | null>(<any>null);
    }

    saveMember(member: MemberDetailsModel | null | undefined): Promise<MemberDetailsModel | null> {
        let url_ = this.baseUrl + "/api/Members";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (member !== null && member !== undefined)
            content_.append("member", member.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveMember(_response);
        });
    }

    protected processSaveMember(response: Response): Promise<MemberDetailsModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MemberDetailsModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemberDetailsModel | null>(<any>null);
    }
}

export class MemberModel implements IMemberModel {
    id!: number;
    first_name?: string | undefined;
    last_name?: string | undefined;
    image?: string | undefined;
    member_group_id?: number | undefined;

    constructor(data?: IMemberModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.first_name = data["first_name"];
            this.last_name = data["last_name"];
            this.image = data["image"];
            this.member_group_id = data["member_group_id"];
        }
    }

    static fromJS(data: any): MemberModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["image"] = this.image;
        data["member_group_id"] = this.member_group_id;
        return data; 
    }
}

export interface IMemberModel {
    id: number;
    first_name?: string | undefined;
    last_name?: string | undefined;
    image?: string | undefined;
    member_group_id?: number | undefined;
}

export class MemberDetailsModel implements IMemberDetailsModel {
    id!: number;
    first_name?: string | undefined;
    last_name?: string | undefined;
    gender!: number;
    date_of_birth!: Date;
    joined_date?: Date | undefined;
    image?: string | undefined;
    contact_address?: string | undefined;
    contact_phone?: string | undefined;
    father_id?: number | undefined;
    mother_id?: number | undefined;
    father_first_name?: string | undefined;
    father_contact_phone?: string | undefined;
    mother_first_name?: string | undefined;
    mother_contact_phone?: string | undefined;
    is_active!: boolean;
    member_group_id?: number | undefined;

    constructor(data?: IMemberDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.first_name = data["first_name"];
            this.last_name = data["last_name"];
            this.gender = data["gender"];
            this.date_of_birth = data["date_of_birth"] ? new Date(data["date_of_birth"].toString()) : <any>undefined;
            this.joined_date = data["joined_date"] ? new Date(data["joined_date"].toString()) : <any>undefined;
            this.image = data["image"];
            this.contact_address = data["contact_address"];
            this.contact_phone = data["contact_phone"];
            this.father_id = data["father_id"];
            this.mother_id = data["mother_id"];
            this.father_first_name = data["father_first_name"];
            this.father_contact_phone = data["father_contact_phone"];
            this.mother_first_name = data["mother_first_name"];
            this.mother_contact_phone = data["mother_contact_phone"];
            this.is_active = data["is_active"];
            this.member_group_id = data["member_group_id"];
        }
    }

    static fromJS(data: any): MemberDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["gender"] = this.gender;
        data["date_of_birth"] = this.date_of_birth ? this.date_of_birth.toISOString() : <any>undefined;
        data["joined_date"] = this.joined_date ? this.joined_date.toISOString() : <any>undefined;
        data["image"] = this.image;
        data["contact_address"] = this.contact_address;
        data["contact_phone"] = this.contact_phone;
        data["father_id"] = this.father_id;
        data["mother_id"] = this.mother_id;
        data["father_first_name"] = this.father_first_name;
        data["father_contact_phone"] = this.father_contact_phone;
        data["mother_first_name"] = this.mother_first_name;
        data["mother_contact_phone"] = this.mother_contact_phone;
        data["is_active"] = this.is_active;
        data["member_group_id"] = this.member_group_id;
        return data; 
    }
}

export interface IMemberDetailsModel {
    id: number;
    first_name?: string | undefined;
    last_name?: string | undefined;
    gender: number;
    date_of_birth: Date;
    joined_date?: Date | undefined;
    image?: string | undefined;
    contact_address?: string | undefined;
    contact_phone?: string | undefined;
    father_id?: number | undefined;
    mother_id?: number | undefined;
    father_first_name?: string | undefined;
    father_contact_phone?: string | undefined;
    mother_first_name?: string | undefined;
    mother_contact_phone?: string | undefined;
    is_active: boolean;
    member_group_id?: number | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}